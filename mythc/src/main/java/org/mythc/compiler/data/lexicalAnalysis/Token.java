package org.mythc.compiler.data.lexicalAnalysis;

/**
 * The {@code Token} enum represents the different types of tokens that can be found in the source code.
 */
public enum Token {

    // Keywords.

    KW_IMPORT,

    // Declarations.
    KW_LET, KW_FUN, KW_TYP, KW_STRUCT, KW_CLASS, KW_ENUM,

    // Modifiers.
    KW_PUBLIC, KW_PRIVATE, KW_PROTECTED, KW_MUT, KW_STATIC,

    // Expressions.
    KW_AND, KW_OR, KW_NOT,
    KW_IF, KW_ELSE, KW_MATCH, KW_CASE, KW_WHILE, KW_DO, KW_FOR, KW_IN,
    KW_RETURN, KW_BREAK, KW_CONTINUE,
    KW_NEW, KW_DEL,

    // Types.
    KW_VOID, KW_BOOL, KW_CHAR,
    KW_UINT8, KW_UINT16, KW_UINT32, KW_UINT64,
    KW_INT8, KW_INT16, KW_INT32, KW_INT64,
    KW_FLOAT32, KW_FLOAT64, KW_STR,

    // Symbols.
    SYM_LPAREN, SYM_RPAREN,
    SYM_LBRACE, SYM_RBRACE,
    SYM_LBRACKET, SYM_RBRACKET,
    SYM_COMMA, SYM_DOT, SYM_COLON, SYM_SEMICOLON,
    SYM_PLUS, SYM_MINUS, SYM_STAR, SYM_SLASH, SYM_PERCENT, SYM_EXCLAMATION, SYM_QUESTION,
    SYM_INCREMENT, SYM_DECREMENT,
    SYM_PLUS_ASSIGN, SYM_MINUS_ASSIGN, SYM_STAR_ASSIGN, SYM_SLASH_ASSIGN, SYM_PERCENT_ASSIGN,
    SYM_EQUAL, SYM_NOT_EQUAL, SYM_LESS, SYM_LESS_EQUAL, SYM_GREATER, SYM_GREATER_EQUAL,
    SYM_REFERENCE, SYM_DEREFERENCE, SYM_ASSIGN,
    SYM_BITWISE_AND, SYM_BITWISE_OR, SYM_BITWISE_XOR, SYM_BITWISE_NOT,
    SYM_BITWISE_AND_ASSIGN, SYM_BITWISE_OR_ASSIGN, SYM_BITWISE_XOR_ASSIGN, SYM_BITWISE_NOT_ASSIGN,
    SYM_FAT_ARROW, SYM_THIN_ARROW,

    // Literals.
    LIT_CHAR, LIT_INT, LIT_FLOAT, LIT_STR, LIT_NULL, LIT_TRUE, LIT_FALSE,

    // Identifiers.
    IDENTIFIER,

    // Support tokens.
    UNKNOWN, EOF

}
